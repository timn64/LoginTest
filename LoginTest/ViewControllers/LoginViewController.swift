//
//  LoginViewController.swift
//  LoginTest
//
//  Created by –¢–∏–º—É—Ä –ù–∞—Å—ã—Ä–æ–≤ on 16.05.2018.
//  Copyright ¬© 2018 –¢–∏–º—É—Ä –ù–∞—Å—ã—Ä–æ–≤. All rights reserved.
//

import UIKit
import Alamofire
import RxSwift

class LoginViewController: UIViewController {
    
    // –∞–ª–∏–∞—Å –¥–ª—è –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–π –∑–∞–ø–∏—Å–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è json
    typealias jsonDict = Dictionary<String, AnyObject>

    @IBOutlet weak var emailTitledTextField: TitledTextField!
    @IBOutlet weak var passwordTitledTextField: TitledTextField!
    @IBOutlet weak var loginButtonBackgroundView: UIView!
    @IBOutlet weak var bottomConstraintForKeyboard: NSLayoutConstraint!
    
    // –∫–∞—Å—Ç–æ–º–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    var activityIndicator: FullsizeActivityIndicator!
    // —ç—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω—É–∂–Ω–∞, —á—Ç–æ–±—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å observer –ø–æ–≤—Ç–æ—Ä–æ–Ω–æ, —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–Ω–µ—Ç —Å–≤–∞–π–ø–∏—Ç—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π VC –≤ Navigation Controller, –Ω–æ –≤–µ—Ä–Ω–µ—Ç—Å—è –≤ —ç—Ç–æ—Ç VC, –Ω–µ –æ—Ç–ø—É—Å–∫–∞—è –ø–∞–ª–µ—Ü
    private var isKeyboardObserverSet = false
    // –ª–µ–Ω–∏–≤—ã–π DateFormatter: —Å–æ–∑–¥–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏
    lazy var dateFormatter: DateFormatter = {
        let dateFormatter = DateFormatter()
        dateFormatter.dateStyle = .long
        dateFormatter.timeStyle = .short
        return dateFormatter
    }()
    
    override func viewDidLoad() {
        super.viewDidLoad()

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ –∫—Ä–∞—è –∫ view, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞. –Ø –Ω–µ —Å—Ç–∞–ª –≤—ã–¥–µ–ª—è—Ç—å –∫–Ω–æ–ø–∫—É –≤ –æ—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏, –Ω–æ –ª—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ, –µ—Å–ª–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —Ç–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
        loginButtonBackgroundView.clipsToBounds = true
        loginButtonBackgroundView.layer.cornerRadius = loginButtonBackgroundView.frame.height/2
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å". Self –æ—Å—Ç–∞–≤–∏–º unowned, –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ —ç—Ç–æ—Ç LoginViewController —Å—É—â–µ—Ç—Å–≤—É–µ—Ç.
        passwordTitledTextField.onButtonTouch = { [unowned self] in
            self.createAndShowSingleButtonAlert(title: "–û—á–µ–Ω—å –∂–∞–ª—å", message: "–í—Å–ø–æ–º–∏–Ω–∞–π—Ç–µ")
        }
        passwordTitledTextField.textField.isSecureTextEntry = true
        
        activityIndicator = FullsizeActivityIndicator(forView: view)
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è/—Å–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    override func viewDidAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        if !isKeyboardObserverSet {
            NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name: Notification.Name.UIKeyboardWillShow, object: nil)
            NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide), name: Notification.Name.UIKeyboardWillHide, object: nil)
            isKeyboardObserverSet = true
        }
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        NotificationCenter.default.removeObserver(self, name: Notification.Name.UIKeyboardWillShow, object: nil)
        NotificationCenter.default.removeObserver(self, name: Notification.Name.UIKeyboardWillHide, object: nil)
        isKeyboardObserverSet = false
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    @IBAction func loginButtonTouched(_ sender: Any) {
        let isMailValid = validateEmail(emailTitledTextField.textField.text ?? "")
        let isPasswordValid = validatePassword(passwordTitledTextField.textField.text ?? "")
        
        if isMailValid && isPasswordValid {
            activityIndicator.start()
            showWeather()
        } else {
            let text: String
            if isMailValid && !isPasswordValid {
                text = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å"
            } else if !isMailValid && isPasswordValid {
                text = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email"
            } else {
                text = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã email –∏ –ø–∞—Ä–æ–ª—å"
            }
            createAndShowSingleButtonAlert(title: "–û—à–∏–±–∫–∞", message: text)
        }
    }
    
    @IBAction func createAccountButtonTouched(_ sender: Any) {
        createAndShowSingleButtonAlert(title: nil, message: "–í—ã –Ω–∞–∂–∏–º–∞–µ—Ç–µ, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç...", buttonText: "üôÅ")
    }
    
    /**
     –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
     
     - returns:
     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ email –∏ –ø–∞—Ä–æ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã. –ò–Ω–∞—á–µ false.
     
     - parameters:
        - password: —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     */
    private func validatePassword(_ password: String) -> Bool {
        return password.count >= 6 && password != password.uppercased() && password != password.lowercased() && password.rangeOfCharacter(from: .decimalDigits) != nil
    }
    
    /**
     –ü—Ä–æ–≤–µ—Ä–∫–∞ email –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
     
     - returns:
     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º email. –ò–Ω–∞—á–µ false.
     
     - parameters:
        - testStr: —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     */
    private func validateEmail(_ testStr: String) -> Bool {
        let emailRegEx = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,64}"
        
        let emailTest = NSPredicate(format:"SELF MATCHES %@", emailRegEx)
        return emailTest.evaluate(with: testStr)
    }
    
    /**
     –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å Alert —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
     
     - parameters:
        - title: –∑–∞–≥–æ–ª–æ–≤–æ–∫
        - message: —Ç–µ–ª–æ
        - buttonText: —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "Ok")
     */
    private func createAndShowSingleButtonAlert(title: String?, message: String?, buttonText: String = "Ok") {
        let loginAlertView = UIAlertController(title: title, message: message, preferredStyle: .alert)
        loginAlertView.addAction(UIAlertAction(title: buttonText, style: .cancel))
        present(loginAlertView, animated: true)
    }

    @objc private func keyboardWillShow(sender: NSNotification) {
        let i = sender.userInfo!
        // –≤—ã—Å–æ—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        let k = (i[UIKeyboardFrameEndUserInfoKey] as! NSValue).cgRectValue.height
        // –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ —ç–∫—Ä–∞–Ω–∞
        var bottom: CGFloat
        if #available(iOS 11.0, *) {
            bottom = view.safeAreaInsets.bottom
        } else {
            bottom = bottomLayoutGuide.length
        }
        bottomConstraintForKeyboard.constant = k - bottom
        // –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (—á—Ç–æ–±—ã view –∞–Ω–∏–º–∏—Ä–æ–≤–∞–ª—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        let s: TimeInterval = (i[UIKeyboardAnimationDurationUserInfoKey] as! NSNumber).doubleValue
        UIView.animate(withDuration: s) { self.view.layoutIfNeeded() }
    }
    
    @objc private func keyboardWillHide(sender: NSNotification) {
        let info = sender.userInfo!
        let s: TimeInterval = (info[UIKeyboardAnimationDurationUserInfoKey] as! NSNumber).doubleValue
        bottomConstraintForKeyboard.constant = 0
        UIView.animate(withDuration: s) { self.view.layoutIfNeeded() }
    }
    
    // –î–∞–ª–µ–µ –∏–¥–µ—Ç –º–æ—è –ø–æ–ø—ã—Ç–∫–∞ —Ö–æ—Ç—è –±—ã —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å RxSwift –∑–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ, –ø—Ä–æ—à—É –Ω–µ —Å—É–¥–∏—Ç—å —Å—Ç—Ä–æ–≥–æ :)
    let disposeBag = DisposeBag()
    
    private func weatherObservable() -> Observable<String?> {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–≥–æ–¥—É —Å openweathermap.org —Å –ø–æ–º–æ—â—å—é Alamofire
        let weatherUrl = URL(string: "https://api.openweathermap.org/data/2.5/weather?q=Moscow&appid=4accf32adb1325a1c38fb1cadf058573")!
        return Observable.create { observer in
            let request = Alamofire.request(weatherUrl).responseJSON(completionHandler: { response in
                switch response.result {
                case .success(let responseValue):
                    // –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ JSON:
                    if let dict = responseValue as? jsonDict,
                        let main = dict["main"] as? jsonDict,
                        let temp = main["temp"] as? Double,
                        let weatherArray = dict["weather"] as? [jsonDict],
                        let weather = weatherArray[0]["main"] as? String,
                        let name = dict["name"] as? String,
                        let sys = dict["sys"] as? jsonDict,
                        let country = sys["country"] as? String,
                        let dt = dict["dt"] as? Double
                    {
                        let tempString = String(format: "%.0f ¬∞C", temp - 273.15)
                        let location = "\(name), \(country)"
                        let date = Date(timeIntervalSince1970: dt)
                        let weatherResultString = "\(self.dateFormatter.string(from: date))\n\(location)\n\(weather)\n\(tempString)"
                        
                        observer.onNext(weatherResultString)
                    } else {
                        observer.onError(NSError(domain: "", code: 1, userInfo: [NSLocalizedDescriptionKey : "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞"]))
                    }
                    
                    observer.onCompleted()
                    
                case .failure(let error):
                    observer.onError(error)
                }
            });
            return Disposables.create(with: request.cancel)
        }
    }
    
    private func showWeather() {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≥–æ–¥—É —Å –ø–æ–º–æ—â—å—é RxSwift (–ø—Ä–æ—Å—Ç–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
        weatherObservable()
            .retry(5) // 5 –ø–æ–ø—ã—Ç–æ–∫
            .timeout(3, scheduler: MainScheduler.instance) // —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 3 —Å–µ–∫—É–Ω–¥—ã
            .subscribe(
                onNext: { weatherResultString in
                    self.createAndShowSingleButtonAlert(title: "–ü–æ–≥–æ–¥–∞", message: weatherResultString)
                },
                onError: { error in
                    print(error)
                    self.createAndShowSingleButtonAlert(title: "–û—à–∏–±–∫–∞", message: "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: \(error.localizedDescription)")
                },
                onCompleted: {
                    print("Completed")
                },
                onDisposed: {
                    print("Disposed")
                    self.activityIndicator.stop()
                }
            )
            .disposed(by: disposeBag)
    }
}
